Version [Version Number] ([Friendly Version Number]) [Release Date]

Version vNext
	General description:

	Project Changes:
		-The solution and projects are converted to Visual Studio 2010. The library is still compatible with
		 .NET 3.5 though.
		-New SimpleInjector.Extensions.Silverlight project was added (and supporting unit test project).
	
	Code Changes:
		-[Core] The Container now registers itself upon creation. This makes some integration scenario's 
		 easier.
		-[Core] A InjectProperties(object) method has been added to the Container. This method enables 
		 injecting public properties to a given type. By adding it to the core library the method can be 
		 optimized for performance and used in integration scenario's without the need for adding the 
		 Extensions.dll.
		-[Core] The 'Handled' property of the UnregisteredTypeEventArgs is made public. This enables some 
		 rare but interesting scenario's were users want to prevent an ActivationException from being thrown 
		 when multiple delegates respond to the same ResolveUnregisteredType event. Publication of the 
		 property allows users skip and continue when another delegate already registered that type.
		-[Extensions] Performance optimization in the RegisterOpenGeneric extension method. Types can now 
		 be resolved as quickly as types that are registered using a Func<T> delegate.
	
	Bug Fixes:
		-[Core] The TransientInstanceProducer<T> and FuncSingletonInstanceProducer<T> incorrectly called 
		 "lock (this)". This behavior was correct in v1.0 were those types were not publicly exposed, but 
		 since the IInstanceProducer interface has gone public in v1.1 this is now incorrect. We could now 
		 face deadlocks when users decide to take a lock (for what strange reason what so ever) on these 
		 instances.
		-[Core] Container.GetAllInstances<T> and Container.GetAllInstances(Type) did not trigger unregistered 
		 type resolution. (work item 16419).
		-[Extensions] The RegisterManyForOpenGeneric and RegisterManySinglesForOpenGeneric extension methods 
		 that take an IEnumerable<Assembly> or Assembly[] failed when a Anonymously Hosted DynamicMethods 
		 Assembly was supplied, which would typically happen when the method was called with 
		 'AppDomain.CurrentDomain.GetAssemblies()'.
		-[Extensions] The methods RegisterOpenGeneric and RegisterSingleOpenGeneric extension methods did not 
		 take generic type constraints and generic type reordering into consideration. (work item 16053).
		-[Extensions] Due to a race condition, it was possible for the RegisterSingleOpenGeneric method to 
		 new up more instances of the same type.


Version 1.1.0.11142 (v1.1 RTM) 2011-05-22
	General description:
		This release fixes a small bug and adds a small feature to the core that allows the retrieval of
		IInstanceProvider types. The SimpleInjector.Extensions.dll builds upon this feature to improve 
		performance of the registrations made using the RegisterAll extension method. The extensions project
		also adds new RegisterManyForOpenGeneric that allow many more advanced scenario's.
	
	Code Changes:
		-RegisterSingle(Container, Type) method removed from NonGenericRegistrationsExtensions class in 
		 SimpleInjector.Extensions. Because of the C# overload resolution rules, the C# compiler never picked 
		 that method, but would always pick Container.RegisterSingle<Type>(Type), which would not yield the 
		 correct configuration. Removing this method is a breaking change of the SimpleInjector.Extensions 
		 library, but users will unlikely be affected by this.
		-Performance optimization for non-generic RegisterAll methods in Extensions library. The optimization
		 prevents the container.GetInstance method from being called on each service type in the collection,
		 but now directly calls into the IInstanceProducer interfaces.
		-Public Container.GetCurrentRegistrations() method added that returns a list of currently registered
		 IInstanceProducer instances. This allows visualizing the registered dependencies.
		-Public Container.GetRegistration(Type) method added 
		-IInstanceProducer has been made public to allow better performance optimizations in the Extensions
		 library and to give users the possibility see what types are registered.
		-New RegisterManyForOpenGeneric overloads added in the Extensions library that allow users to supply
		 a callback delegate that does the actual registration. This allows alternative scenario's such as 
		 registration of multiple implementations of a closed generic service type. (work item 15878).
		-The RegisterInitializer<T> method now allows multiple Action<T> delegates to be registered for a
		 single T. (work item 15842).

	Bug Fixes:
		-Container.GetService method failed on concrete unregistered types, that could not be resolved using
		 auto-wiring, such as System.String and System.Int32. (work item 15843).


Version 1.0.0.11115 (v1.0 RTM) 2011-04-26
	General description:
	    First release of the Simple Injector.
		
	Code Changes compared to the Simple Service Locator v1.0:
	    -Generic type constraint 'where T : class' added to the GetInstance<T> and GetAllInstances<T> methods.
	    -Register<TConcrete>() method added for better Silverlight support.
	    -Register<TConcrete>(Action<TConcrete>) and RegisterSingle<TConcrete>(Action<TConcrete>) methods
	     removed.
	    -RegisterInitializer<TService>(Action<TService>) method added.
	    -The SimpleServiceLocator class is renamed to Container.
	    -Extensions project is now a fully supported addition.
	    -Silverlight unit test project added.
	    -CSL Adapter project added: contains an adapter from the Simple Injector to the Common Service Locator.
	    -Dependency on the Common Service Locator removed.
	
	Bug Fixes:
	    -Silverlight support fixed. The container did not work properly in Silverlight.
	    -Performance problems with the IServiceProvider.GetService(Type) method solved.
