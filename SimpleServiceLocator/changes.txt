Version [Version Number] ([Friendly Version Number]) [Release Date]

Version vNext
	General description:

	Code Changes:
		-[Extensions] New DecoratorExtensions class added. This class replaces GenericDecoratorExtensions
		 and allows registering both generic and non-generic decorators and enables decorating collections
		 that are returned using GetAllInstances or are injected using IEnumerable<T> constructor arguments.

	Bug fixes:
		-[Extensions] RegisterManyForOpenGeneric extension method threw an exception which message contained
		 the .NET type instead of the 'friendly' type name, as the rest of the Simple Injector uses.


Version 1.4.1.12065 (v1.4.1 RTM) 2012-03-05
	General description:
		RegisterOpenGenericDecorator extension methods improved to allow registering non-generic deceorator.

	Code Changes:
		-[Extensions] GetTypesToRegister methods added to the OpenGenericBatchRegistrationExtensions class
		 which allows to customize the behavior.
		-[Extensions] RegisterOpenGenericDecorator extension methods now allow registering non-generic
		 implementations, as long as they implement the supplied open generic service type.

	Bug fixes:


Version 1.4.0.12049 (v1.4.0 RTM) 2012-02-18
	General description:
		Container.GetInitializer<T> method added to the core library, and RegisterManyForOpenGeneric in
		extensions now execute initalizers on decorators.

	Code Changes:
		-[Core] The internal Container.GetInitializerFor<T> method has been made public and renamed to
		 GetInitializer<T>. This enables certain specialized scenarios. The main (external) consumer of
		 this method is the RegisterManyForOpenGeneric method of the Extensions project.
		-[Extensions] Decorators created using the RegisterManyForOpenGeneric extension methods now get
		 initialized with any registered initializers (if any).

	Bug fixes:
		-[Core] The exception message that was thrown in case the delegate of a type could not be compiled, 
		 incorrectly described the UnregisteredTypeEventArgs.Register method, which was confusing.


Version 1.3.1.11358 (v1.3.1 RTM) 2011-12-23
	General description:
		RegisterOpenGenericDecorator extension methods added to the SimpleInjector.Extensions project.

	Code Changes:
		-[Extensions] New RegisterManyForOpenGeneric overloads added.
		-[Extensions] RegisterOpenGenericDecorator extension methods have been added.


Version 1.3.0.11343 (v1.3 RTM) 2011-12-09
	General description:
		This release adds a few features and fixes two bugs in the core library. The most important new
		feature is the addition of a ExpresionBuilt event, which allows users to alter the way types are 
		created by the container. This enables scenarios as interception, context based injection, and 
		wrapping types with decorators.
			
	Code Changes:
		-[Core] A new overload to the Container.GetRegistration() method has been added. This overload allows
		 users to signal whether the method should throw or return null (what the original overload does).
		 Since the GetRegistration is the only method in the system that both builds and returns
		 IInstanceProducers, it is very convenient when it can throw, because this makes some scenario's
		 using the ExpressionBuilt event much cleaner, with less code.
		-[Core] All exception messages now display the names of generic types in short C# notation. 
		 For instance, messages will now show a name such as IEnumerable<IComparable<Int32>> instead of the
		 unreadable System.Collections.Generic.IEnumerable`1[System.IComparable`1[System.Int32]].
		-[Core] New constructor overload added to the Container allowing to change the behavior of the
		 container using the new ContainerOptions class. The only option currently supported is 
		 AllowOverridingRegistrations.
		-[Core] Container.ExpressionBuilt event added to enable interception scenarios.
		-[Core] InstanceProducers are now allowed to return types that can not be casted to the given service 
		 type. This allows them to be retrieved using the non-generic Container.GetInstance(Type) and is
		 useful for interception scenarios.
		-[Core] Large internal refactoring of the InstanceProducer model. A lot of duplicate code is removed.
	
	Bug Fixes:
		-[Core] InjectProperties and GetRegistration failed in certain circumstances. (work item 16930)
		-[Core] Calling the Verify method still resulted in a lockdown of the container, when the registered
		 delegates called back into the container. This made it impossible to verify a partially configured
		 container.


Version 1.2.0.11273 (v1.2 RTM) 2011-09-30
	General description:
		This release fixes a few small bugs, adds the possibility to do property injection, improves 
		performance and the SimpleInjector.Extensions.dll is now available for Silverlight.

	Project Changes:
		-The solution and projects are converted to Visual Studio 2010. The library is still compatible with
		 .NET 3.5 though.
		-New SimpleInjector.Extensions.Silverlight project was added (and supporting unit test project).
	
	Code Changes:
		-[Extensions] Performance optimization in the RegisterOpenGeneric en RegisterSingleOpenGeneric 
		 extension methods. Types can now be resolved as quickly as types that are registered using 
		 container.Register<TService, TImplementation>() and container.RegisterSingle<T>(T), which are the
		 fasted type of registrations.
		-[Core] New UnregisteredTypeEventArgs.Register(Expression) method was added to allow improving
		 performance of unregistered type resolution scenarios. (work item 16641).
		-[Extensions] Register(Container, Type) method added to the NonGenericRegistrationsExtensions class
		 to allow registration of concrete transient types.
		-[Core] The Container now registers itself upon creation. This makes some integration scenarios 
		 easier.
		-[Core] A InjectProperties(object) method has been added to the Container. This method enables 
		 injecting public properties to a given type. By adding it to the core library the method can be 
		 optimized for performance and used in integration scenarios without the need for adding the 
		 Extensions.dll.
		-[Core] The 'Handled' property of the UnregisteredTypeEventArgs is made public. This enables some 
		 rare but interesting scenarios were users want to prevent an ActivationException from being thrown 
		 when multiple delegates respond to the same ResolveUnregisteredType event. Publication of the 
		 property allows users skip and continue when another delegate already registered that type.
	
	Bug Fixes:
		-[Extensions] NonGenericRegistrationsExtensions.RegisterAll(Container, Type, params Type[]) method was
		 removed, because it was never picked by C# compiler when doing overload resolution.
		-[Core] FuncSingletonInstanceProducer<T> did not reset the CyclicDependencyValidator in case of an
		 exception, which causes the CyclicDependencyValidator to go of when that failing producer was called
		 multiple times, hiding the real cause of failure.
		-[Core] The TransientInstanceProducer<T> and FuncSingletonInstanceProducer<T> incorrectly called 
		 "lock (this)". This behavior was correct in v1.0 were those types were not publicly exposed, but 
		 since the IInstanceProducer interface has gone public in v1.1 this is now incorrect. We could now 
		 face deadlocks when users decide to take a lock (for what strange reason what so ever) on these 
		 instances.
		-[Core] Container.GetAllInstances<T> and Container.GetAllInstances(Type) did not trigger unregistered 
		 type resolution. (work item 16419).
		-[Extensions] The RegisterManyForOpenGeneric and RegisterManySinglesForOpenGeneric extension methods 
		 that take an IEnumerable<Assembly> or Assembly[] failed when a Anonymously Hosted DynamicMethods 
		 Assembly was supplied, which would typically happen when the method was called with 
		 'AppDomain.CurrentDomain.GetAssemblies()'.
		-[Extensions] The methods RegisterOpenGeneric and RegisterSingleOpenGeneric extension methods did not 
		 take generic type constraints and generic type reordering into consideration. (work item 16053).
		-[Extensions] Due to a race condition, it was possible for the RegisterSingleOpenGeneric method to 
		 new up more instances of the same type.


Version 1.1.0.11142 (v1.1 RTM) 2011-05-22
	General description:
		This release fixes a small bug and adds a small feature to the core that allows the retrieval of
		IInstanceProvider types. The SimpleInjector.Extensions.dll builds upon this feature to improve 
		performance of the registrations made using the RegisterAll extension method. The extensions project
		also adds new RegisterManyForOpenGeneric that allow many more advanced scenarios.
	
	Code Changes:
		-RegisterSingle(Container, Type) method removed from NonGenericRegistrationsExtensions class in 
		 SimpleInjector.Extensions. Because of the C# overload resolution rules, the C# compiler never picked 
		 that method, but would always pick Container.RegisterSingle<Type>(Type), which would not yield the 
		 correct configuration. Removing this method is a breaking change of the SimpleInjector.Extensions 
		 library, but users will unlikely be affected by this.
		-Performance optimization for non-generic RegisterAll methods in Extensions library. The optimization
		 prevents the container.GetInstance method from being called on each service type in the collection,
		 but now directly calls into the IInstanceProducer interfaces.
		-Public Container.GetCurrentRegistrations() method added that returns a list of currently registered
		 IInstanceProducer instances. This allows visualizing the registered dependencies.
		-Public Container.GetRegistration(Type) method added 
		-IInstanceProducer has been made public to allow better performance optimizations in the Extensions
		 library and to give users the possibility see what types are registered.
		-New RegisterManyForOpenGeneric overloads added in the Extensions library that allow users to supply
		 a callback delegate that does the actual registration. This allows alternative scenarios such as 
		 registration of multiple implementations of a closed generic service type. (work item 15878).
		-The RegisterInitializer<T> method now allows multiple Action<T> delegates to be registered for a
		 single T. (work item 15842).

	Bug Fixes:
		-Container.GetService method failed on concrete unregistered types, that could not be resolved using
		 auto-wiring, such as System.String and System.Int32. (work item 15843).


Version 1.0.0.11115 (v1.0 RTM) 2011-04-26
	General description:
	    First release of the Simple Injector.
		
	Code Changes compared to the Simple Service Locator v1.0:
	    -Generic type constraint 'where T : class' added to the GetInstance<T> and GetAllInstances<T> methods.
	    -Register<TConcrete>() method added for better Silverlight support.
	    -Register<TConcrete>(Action<TConcrete>) and RegisterSingle<TConcrete>(Action<TConcrete>) methods
	     removed.
	    -RegisterInitializer<TService>(Action<TService>) method added.
	    -The SimpleServiceLocator class is renamed to Container.
	    -Extensions project is now a fully supported addition.
	    -Silverlight unit test project added.
	    -CSL Adapter project added: contains an adapter from the Simple Injector to the Common Service Locator.
	    -Dependency on the Common Service Locator removed.
	
	Bug Fixes:
	    -Silverlight support fixed. The container did not work properly in Silverlight.
	    -Performance problems with the IServiceProvider.GetService(Type) method solved.
